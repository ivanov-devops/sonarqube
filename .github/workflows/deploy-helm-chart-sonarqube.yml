name: Deploy SonarQube

on:
  workflow_run:
    workflows: ["Build Helm Chart SonarQube"]
    types:
      - completed
  push:
    branches:
      - main


jobs:
  wait-for-pages-build:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for pages-build-deployment workflow to complete
        id: wait
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/ivanov-devops/sonarqube/actions/runs/${{ github.event.workflow_run.id }}
          mediaType: '{"previews": ["antiope"]}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Check if pages-build-deployment workflow was successful
        run: |
          echo "Getting pages-build-deployment workflow status..."
          outcome=$(echo "${{ steps.wait.outputs.response_data }}" | jq -r '.conclusion // empty')
          if [ "$outcome" = "success" ]; then
            echo "pages-build-deployment workflow was successful."
            echo "deploy=true" >> $GITHUB_ENV
          else
            echo "pages-build-deployment workflow was not successful."
            echo "deploy=false" >> $GITHUB_ENV
          fi
        shell: bash

  deploy:
    needs: wait-for-pages-build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Kubernetes
        run: |
          mkdir ${HOME}/.kube
          echo ${{ secrets.KUBE_CONFIG }} | base64 --decode > ${HOME}/.kube/config
          cat ${HOME}/.kube/config

      - name: Install Helm Chart
        run: |
          helm repo add sonarqube https://ivanov-devops.github.io/sonarqube/
          helm repo update
          #kubectl create namespace sonarqube-dce
          kubectl create namespace sonarqube-dce --dry-run=client -o yaml | kubectl apply -f -
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          helm upgrade --install -n sonarqube-dce sonarqube sonarqube/sonarqube-dce --set ApplicationNodes.jwtSecret=$JWT_SECRET
